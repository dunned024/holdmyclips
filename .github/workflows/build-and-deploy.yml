name: Deploy

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  NODE_VERSION: '24'
  AWS_REGION: 'us-east-1'

jobs:
  check-changes:
    name: Check what changed
    runs-on: ubuntu-latest
    outputs:
      spa: ${{ steps.filter.outputs.spa }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            spa:
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'vite.config.ts'
              - 'index.html'
              - '.env*'
  
  deploy:
    name: Deploy to ${{ github.event_name == 'release' && 'Prod' || 'Dev' }}
    needs: check-changes
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write  # Required for OIDC
      contents: write  # Required to create releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment variables
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "BUILD_MODE=prod" >> $GITHUB_ENV
            echo "BUCKET_NAME=hold-my-clips" >> $GITHUB_ENV
            echo "DISTRIBUTION_ID=E7IFJJISZ0BM3" >> $GITHUB_ENV
            echo "URL=https://clips.dunned024.com" >> $GITHUB_ENV
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN_PROD }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "BUILD_MODE=dev" >> $GITHUB_ENV
            echo "BUCKET_NAME=hold-my-clips-dev" >> $GITHUB_ENV
            echo "DISTRIBUTION_ID=EQTDEZTES3QCU" >> $GITHUB_ENV
            echo "URL=https://clips-dev.dunned024.com" >> $GITHUB_ENV
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN_DEV }}" >> $GITHUB_ENV
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        if: needs.check-changes.outputs.spa == 'true'
        run: npm ci
      
      - name: Build application
        if: needs.check-changes.outputs.spa == 'true'
        run: npm run build:${{ env.BUILD_MODE }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install infra dependencies
        working-directory: ./infra
        run: npm ci
      
      - name: Build infrastructure
        working-directory: ./infra
        run: npm run build
      
      - name: Deploy infrastructure
        working-directory: ./infra
        run: |
          npx cdk deploy --all \
            --context environment=${{ env.ENVIRONMENT }} \
            --require-approval never \
            --outputs-file cdk-outputs.json
      
      - name: Deploy application
        if: needs.check-changes.outputs.spa == 'true'
        run: |
          echo "Deleting old deployment..."
          aws s3 rm s3://${{ env.BUCKET_NAME }}/static/css/ --recursive
          aws s3 rm s3://${{ env.BUCKET_NAME }}/static/js/ --recursive
          
          echo "Uploading new deployment..."
          aws s3 sync build/ s3://${{ env.BUCKET_NAME }}
          
          echo "Creating CloudFront invalidation..."
          invalidation_id=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.DISTRIBUTION_ID }} \
            --paths "/*" \
            --query "Invalidation.Id" \
            --output text)
          
          echo "Invalidation created: ${invalidation_id}"
          echo "Waiting for invalidation to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.DISTRIBUTION_ID }} \
            --id ${invalidation_id}
          
          echo "Deployment to ${{ env.ENVIRONMENT }} complete!"
      
      - name: Output deployment info
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "### Prod Deployment Successful! 🎉" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: Prod" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: ${{ env.URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release**: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release Name**: ${{ github.event.release.name }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.check-changes.outputs.spa }}" == "true" ]]; then
              echo "- **SPA**: Rebuilt and deployed ✅" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **SPA**: No changes, skipped ⏭️" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Dev Deployment Successful! 🚀" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: Dev" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: ${{ env.URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.check-changes.outputs.spa }}" == "true" ]]; then
              echo "- **SPA**: Rebuilt and deployed ✅" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **SPA**: No changes, skipped deploy ⏭️" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Create draft pre-release
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Generate timestamp-based version tag
          TIMESTAMP=$(date +'%Y-%m-%dT%H%M')

          # Create draft pre-release and capture the URL
          RELEASE_URL=$(gh release create "$TIMESTAMP" \
            --title "$TIMESTAMP" \
            --draft \
            --prerelease \
            --target ${{ github.sha }} \
            | sed 's/releases\/tag/releases\/edit/')
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Draft Pre-release Created**: $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To deploy to Prod, [publish this release]($RELEASE_URL)" >> $GITHUB_STEP_SUMMARY

